/*
 * MCMCAN.c
 *
 *  Created on: Apr 11, 2023
 *      Author: uif47623
 */
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "MCMCAN.h"
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
McmcanType                  CAN_Control;                    /* Global MCMCAN configuration and control structure    */
IfxPort_Pin_Config          g_led1;                         /* Global LED1 configuration and control structure      */
IfxPort_Pin_Config          g_led2;                         /* Global LED2 configuration and control structure      */
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/* Macro to define Interrupt Service Routine.
 * This macro:
 * - defines linker section as .intvec_tc<vector number>_<interrupt priority>.
 * - defines compiler specific attribute for the interrupt functions.
 * - defines the Interrupt service routine as ISR function.
 *
 * IFX_INTERRUPT(isr, vectabNum, priority)
 *  - isr: Name of the ISR function.
 *  - vectabNum: Vector table number.
 *  - priority: Interrupt priority. Refer Usage of Interrupt Macro for more details.
 */
IFX_INTERRUPT(canIsrTxHandler, 0, ISR_PRIORITY_CAN_TX);
IFX_INTERRUPT(canIsrRxHandler, 0, ISR_PRIORITY_CAN_RX);

/* Interrupt Service Routine (ISR) called once the TX interrupt has been generated.
 * Turns on the LED1 to indicate successful CAN message transmission.
 */
void canIsrTxHandler(void)
{
    /* Clear the "Transmission Completed" interrupt flag */
    IfxCan_Node_clearInterruptFlag(CAN_Control.canSrcNode.node, IfxCan_Interrupt_transmissionCompleted);

    /* Just to indicate that the CAN message has been transmitted by turning on LED1 */
    IfxPort_togglePin(g_led1.port, g_led1.pinIndex);
}

/* Interrupt Service Routine (ISR) called once the RX interrupt has been generated. */
void canIsrRxHandler(void)
{
    /* Clear the "Message stored to Dedicated RX Buffer" interrupt flag */
    IfxCan_Node_clearInterruptFlag(CAN_Control.canSrcNode.node, IfxCan_Interrupt_messageStoredToDedicatedRxBuffer);

    /* Read the received CAN message */
    IfxCan_Can_readMessage(&CAN_Control.canSrcNode, &CAN_Control.rxMsg, CAN_Control.rxData);

    // Check rx message id
    if (CAN_Control.rxMsg.messageId == 0x100) {
        IfxPort_togglePin(g_led2.port, g_led2.pinIndex);
    }
}

/* Function to initialize MCMCAN module and nodes related for this application use case */
void initMcmcan(void)
{
    /**
     * Load default CAN module configuration into configuration structure
     */
    IfxCan_Can_initModuleConfig (&CAN_Control.canConfig,        &MODULE_CAN0);
    IfxCan_Can_initModule       (&CAN_Control.canModule,        &CAN_Control.canConfig);
    IfxCan_Can_initNodeConfig   (&CAN_Control.canNodeConfig,    &CAN_Control.canModule);

    /**
     * CAN Node Configuration
     */
    const IfxCan_Can_Pins pins = {
        &TX_PIN, IfxPort_OutputMode_pushPull,
        &RX_PIN, IfxPort_InputMode_pullUp,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };

    CAN_Control.canNodeConfig.busLoopbackEnabled = FALSE;
    CAN_Control.canNodeConfig.pins = &pins;
    CAN_Control.canNodeConfig.nodeId = IfxCan_NodeId_0;

    CAN_Control.canNodeConfig.frame.type = IfxCan_FrameType_transmitAndReceive;

    CAN_Control.canNodeConfig.interruptConfig.transmissionCompletedEnabled = TRUE;
    CAN_Control.canNodeConfig.interruptConfig.traco.priority = ISR_PRIORITY_CAN_TX;
    CAN_Control.canNodeConfig.interruptConfig.traco.interruptLine = IfxCan_InterruptLine_0;
    CAN_Control.canNodeConfig.interruptConfig.traco.typeOfService = IfxSrc_Tos_cpu0;


    CAN_Control.canNodeConfig.interruptConfig.messageStoredToDedicatedRxBufferEnabled = TRUE;
    CAN_Control.canNodeConfig.interruptConfig.reint.priority = ISR_PRIORITY_CAN_RX;
    CAN_Control.canNodeConfig.interruptConfig.reint.interruptLine = IfxCan_InterruptLine_1;
    CAN_Control.canNodeConfig.interruptConfig.reint.typeOfService = IfxSrc_Tos_cpu0;

    IfxCan_Can_initNode(&CAN_Control.canSrcNode, &CAN_Control.canNodeConfig);

    /**
     * CAN Filter Configuration
     */
    CAN_Control.canFilter.number = 0;
    CAN_Control.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    CAN_Control.canFilter.id1 = 0x100;  //CAN_MESSAGE_ID;
    CAN_Control.canFilter.rxBufferOffset = IfxCan_RxBufferId_0;

    IfxCan_Can_setStandardFilter(&CAN_Control.canSrcNode, &CAN_Control.canFilter);
}

/* Function to initialize TX message
 * After initialization of the messages, the TX message is transmitted.
 */
void transmitCanMessage(void)
{
    /* Initialization of the TX message with the default configuration */
    IfxCan_Can_initMessage(&CAN_Control.txMsg);

    /* Define the content of the data to be transmitted */
    CAN_Control.txData[0] = TX_DATA_LOW_WORD;
    CAN_Control.txData[1] = TX_DATA_HIGH_WORD;

    /* Set the message ID that is used during the receive acceptance phase */
    CAN_Control.txMsg.messageId = CAN_MESSAGE_ID;

    /* Send the CAN message with the previously defined TX message content */
    while( IfxCan_Status_notSentBusy ==
           IfxCan_Can_sendMessage(&CAN_Control.canSrcNode, &CAN_Control.txMsg, &CAN_Control.txData[0]) )
    {
    }

    //IfxPort_togglePin(g_led1.port, g_led1.pinIndex);
}

/* Function to initialize the LEDs */
void initLeds(void)
{
    /* ======================================================================
     * Configuration of the pins connected to the LEDs:
     * ======================================================================
     *  - define the GPIO port
     *  - define the GPIO pin that is connected to the LED
     *  - define the general GPIO pin usage (no alternate function used)
     *  - define the pad driver strength
     * ======================================================================
     */
    g_led1.port      = &MODULE_P20;//&MODULE_P13;
    g_led1.pinIndex  = 11;//PIN0;
    g_led1.mode      = IfxPort_OutputIdx_general;
    //g_led1.padDriver = IfxPort_PadDriver_cmosAutomotiveSpeed1;

    g_led2.port      = &MODULE_P20;//&MODULE_P13;
    g_led2.pinIndex  = 13;//PIN1;
    g_led2.mode      = IfxPort_OutputIdx_general;
    //g_led2.padDriver = IfxPort_PadDriver_cmosAutomotiveSpeed1;

    /* Set the pin input/output mode for both pins connected to the LEDs */
    IfxPort_setPinModeOutput(g_led1.port, g_led1.pinIndex, IfxPort_OutputMode_pushPull, g_led1.mode);
    IfxPort_setPinModeOutput(g_led2.port, g_led2.pinIndex, IfxPort_OutputMode_pushPull, g_led2.mode);

    /* Initialize the pins connected to LEDs to level "HIGH", which keep the LEDs turned off as default state */
    IfxPort_setPinHigh(g_led1.port, g_led1.pinIndex);
    IfxPort_setPinHigh(g_led2.port, g_led2.pinIndex);

//    /* Set the pad driver mode for both pins connected to the LEDs */
//    IfxPort_setPinPadDriver(g_led1.port, g_led1.pinIndex, g_led1.padDriver);
//    IfxPort_setPinPadDriver(g_led2.port, g_led2.pinIndex, g_led2.padDriver);
}
