/*
 * Can_Drv.c
 *
 *  Created on: May 19, 2023
 *      Author: uif47623
 */
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Can_Drv.h"
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
McmCanType McmCan;
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
IFX_INTERRUPT(canIsrTxHandler, 0, ISR_PRIORITY_CAN_TX);
IFX_INTERRUPT(canIsrRxHandler, 0, ISR_PRIORITY_CAN_RX);

void Can_Drv_v_InitCan() {
    // load default CAN module config into config struct
    IfxCan_Can_initModuleConfig(&McmCan.canConfig, &MODULE_CAN0);
    // init CAN module with default config
    IfxCan_Can_initModule(&McmCan.canModule, &McmCan.canConfig);


    // load default config in config struct
    IfxCan_Can_initNodeConfig(&McmCan.canNodeConfig, &McmCan.canModule);
    McmCan.canNodeConfig.nodeId = IfxCan_NodeId_0;
    McmCan.canNodeConfig.frame.type = IfxCan_FrameType_transmit;
    // set tx mode to dedicated buffers
    McmCan.canNodeConfig.txConfig.txMode = 2;

    g_mcmcan.canNodeConfig.interruptConfig.transmissionCompletedEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.traco.priority = ISR_PRIORITY_CAN_TX;
    g_mcmcan.canNodeConfig.interruptConfig.traco.interruptLine = IfxCan_InterruptLine_0;
    g_mcmcan.canNodeConfig.interruptConfig.traco.typeOfService = IfxSrc_Tos_cpu0;
}

void Can_Drv_v_TransmitCanMessage(void) {

}

void canIsrRxHandler(void)
{

}

void canIsrTxHandler(void)
{

}
